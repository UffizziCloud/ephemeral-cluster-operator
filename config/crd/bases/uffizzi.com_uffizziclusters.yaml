---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: uffizziclusters.uffizzi.com
spec:
  group: uffizzi.com
  names:
    kind: UffizziCluster
    listKind: UffizziClusterList
    plural: uffizziclusters
    shortNames:
    - uc
    - ucluster
    singular: uffizzicluster
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='APIReady')].status
      name: APIReady
      type: string
    - jsonPath: .status.conditions[?(@.type=='DataStoreReady')].status
      name: DataStoreReady
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Sleep')].status
      name: Sleep
      type: string
    - jsonPath: .status.host
      name: Host
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.lastAwakeTime
      name: UptimeSinceLastAwake
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: UffizziCluster is the Schema for the UffizziClusters API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: UffizziClusterSpec defines the desired state of UffizziCluster
            properties:
              apiServer:
                description: UffizziClusterAPIServer defines the API server capabilities
                  of the cluster
                properties:
                  image:
                    type: string
                type: object
              distro:
                default: k3s
                enum:
                - k3s
                - k8s
                type: string
              externalDatastore:
                default: sqlite
                enum:
                - etcd
                - sqlite
                type: string
              helm:
                items:
                  properties:
                    chart:
                      properties:
                        name:
                          type: string
                        repo:
                          type: string
                        version:
                          type: string
                      required:
                      - name
                      - repo
                      type: object
                    release:
                      properties:
                        name:
                          type: string
                        namespace:
                          type: string
                      required:
                      - name
                      - namespace
                      type: object
                    values:
                      type: string
                  required:
                  - chart
                  - release
                  type: object
                type: array
              ingress:
                description: UffiClusterIngress defines the ingress capabilities of
                  the cluster, the basic host can be setup for all
                properties:
                  class:
                    type: string
                  host:
                    type: string
                type: object
              limitRange:
                properties:
                  default:
                    properties:
                      cpu:
                        default: "0.5"
                        type: string
                      ephemeralStorage:
                        default: 8Gi
                        type: string
                      memory:
                        default: 1Gi
                        type: string
                    type: object
                  defaultRequest:
                    properties:
                      cpu:
                        default: "0.1"
                        type: string
                      ephemeralStorage:
                        default: 1Gi
                        type: string
                      memory:
                        default: 128Mi
                        type: string
                    type: object
                  enabled:
                    default: true
                    type: boolean
                required:
                - enabled
                type: object
              manifests:
                type: string
              nodeselector:
                description: A node selector represents the union of the results of
                  one or more label queries over a set of nodes; that is, it represents
                  the OR of the selectors represented by the node selector terms.
                properties:
                  nodeSelectorTerms:
                    description: Required. A list of node selector terms. The terms
                      are ORed.
                    items:
                      description: A null or empty node selector term matches no objects.
                        The requirements of them are ANDed. The TopologySelectorTerm
                        type implements a subset of the NodeSelectorTerm.
                      properties:
                        matchExpressions:
                          description: A list of node selector requirements by node's
                            labels.
                          items:
                            description: A node selector requirement is a selector
                              that contains values, a key, and an operator that relates
                              the key and values.
                            properties:
                              key:
                                description: The label key that the selector applies
                                  to.
                                type: string
                              operator:
                                description: Represents a key's relationship to a
                                  set of values. Valid operators are In, NotIn, Exists,
                                  DoesNotExist. Gt, and Lt.
                                type: string
                              values:
                                description: An array of string values. If the operator
                                  is In or NotIn, the values array must be non-empty.
                                  If the operator is Exists or DoesNotExist, the values
                                  array must be empty. If the operator is Gt or Lt,
                                  the values array must have a single element, which
                                  will be interpreted as an integer. This array is
                                  replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                            - key
                            - operator
                            type: object
                          type: array
                        matchFields:
                          description: A list of node selector requirements by node's
                            fields.
                          items:
                            description: A node selector requirement is a selector
                              that contains values, a key, and an operator that relates
                              the key and values.
                            properties:
                              key:
                                description: The label key that the selector applies
                                  to.
                                type: string
                              operator:
                                description: Represents a key's relationship to a
                                  set of values. Valid operators are In, NotIn, Exists,
                                  DoesNotExist. Gt, and Lt.
                                type: string
                              values:
                                description: An array of string values. If the operator
                                  is In or NotIn, the values array must be non-empty.
                                  If the operator is Exists or DoesNotExist, the values
                                  array must be empty. If the operator is Gt or Lt,
                                  the values array must have a single element, which
                                  will be interpreted as an integer. This array is
                                  replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                            - key
                            - operator
                            type: object
                          type: array
                      type: object
                      x-kubernetes-map-type: atomic
                    type: array
                required:
                - nodeSelectorTerms
                type: object
                x-kubernetes-map-type: atomic
              resourceQuota:
                description: UffizziClusterResourceQuota defines the resource quota
                  which defines the quota of resources a namespace has access to
                properties:
                  count:
                    properties:
                      configMaps:
                        default: 20
                        type: integer
                      endpoints:
                        default: 10
                        type: integer
                      persistentVolumeClaims:
                        default: 10
                        type: integer
                      pods:
                        default: 20
                        type: integer
                      secrets:
                        default: 20
                        type: integer
                      services:
                        default: 10
                        type: integer
                    type: object
                  enabled:
                    default: true
                    type: boolean
                  limits:
                    properties:
                      cpu:
                        default: "0.5"
                        type: string
                      ephemeralStorage:
                        default: 5Gi
                        type: string
                      memory:
                        default: 8Gi
                        type: string
                    type: object
                  requests:
                    properties:
                      cpu:
                        default: "0.5"
                        type: string
                      ephemeralStorage:
                        default: 5Gi
                        type: string
                      memory:
                        default: 1Gi
                        type: string
                      storage:
                        default: 10Gi
                        type: string
                    type: object
                  services:
                    properties:
                      loadBalancers:
                        default: 3
                        type: integer
                      nodePorts:
                        default: 0
                        type: integer
                    type: object
                required:
                - enabled
                type: object
              sleep:
                type: boolean
              tolerations:
                items:
                  description: The pod this Toleration is attached to tolerates any
                    taint that matches the triple <key,value,effect> using the matching
                    operator <operator>.
                  properties:
                    effect:
                      description: Effect indicates the taint effect to match. Empty
                        means match all taint effects. When specified, allowed values
                        are NoSchedule, PreferNoSchedule and NoExecute.
                      type: string
                    key:
                      description: Key is the taint key that the toleration applies
                        to. Empty means match all taint keys. If the key is empty,
                        operator must be Exists; this combination means to match all
                        values and all keys.
                      type: string
                    operator:
                      description: Operator represents a key's relationship to the
                        value. Valid operators are Exists and Equal. Defaults to Equal.
                        Exists is equivalent to wildcard for value, so that a pod
                        can tolerate all taints of a particular category.
                      type: string
                    tolerationSeconds:
                      description: TolerationSeconds represents the period of time
                        the toleration (which must be of effect NoExecute, otherwise
                        this field is ignored) tolerates the taint. By default, it
                        is not set, which means tolerate the taint forever (do not
                        evict). Zero and negative values will be treated as 0 (evict
                        immediately) by the system.
                      format: int64
                      type: integer
                    value:
                      description: Value is the taint value the toleration matches
                        to. If the operator is Exists, the value should be empty,
                        otherwise just a regular string.
                      type: string
                  type: object
                type: array
            type: object
          status:
            description: UffizziClusterStatus defines the observed state of UffizziCluster
            properties:
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              helmReleaseRef:
                type: string
              host:
                type: string
              kubeConfig:
                description: VClusterKubeConfig is the KubeConfig SecretReference
                  of the related VCluster
                properties:
                  secretRef:
                    description: SecretKeyReference contains enough information to
                      locate the referenced Kubernetes Secret object in the same namespace.
                      Optionally a key can be specified. Use this type instead of
                      core/v1 SecretKeySelector when the Key is optional and the Optional
                      field is not applicable.
                    properties:
                      key:
                        description: Key in the Secret, when not specified an implementation-specific
                          default key is used.
                        type: string
                      name:
                        description: Name of the Secret.
                        type: string
                    required:
                    - name
                    type: object
                type: object
              lastAppliedConfiguration:
                type: string
              lastAppliedHelmReleaseSpec:
                type: string
              lastAwakeTime:
                format: date-time
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
